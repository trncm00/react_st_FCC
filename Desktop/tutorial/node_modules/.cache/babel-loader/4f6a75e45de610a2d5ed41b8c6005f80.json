{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\TAM_1\\\\Desktop\\\\tutorial\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDom from 'react-dom'; //css, this means the file is in the same folder, I.E the css folder\n//is in the src folder with all the rest\n\nimport './index.css';\n/*\nrefactoring individual objects into an array by wrapping our objects in\nan opening square bracket and a closing square bracket,\nand also removing each closing semi-colon and replacing them with\na single comma\n\n\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst books = [{\n  img: 'https://images-na.ssl-images-amazon.com/images/I/81caWwaOOKL._AC_UL200_SR200,200_.jpg ',\n  title: 'Once Upon a Time in Hollywood',\n  author: 'Quentin Tarantino'\n}, {\n  img: 'https://images-na.ssl-images-amazon.com/images/I/71R8H1PuNdS._AC_UL200_SR200,200_.jpg',\n  title: 'Speechless: Controlling words, Controlling Minds',\n  author: 'Michael Knowles'\n}];\n\nfunction BookList() {\n  return /*#__PURE__*/_jsxDEV(\"section\", {\n    className: \"booklist\",\n    children: books.map(book => {\n      console.log(book);\n      return {\n        books\n      };\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n}\n\n_c = BookList;\n{\n  /*alternative ways of doing props, single line style, neater */\n}\n\nconst Book = ({\n  img,\n  title,\n  author\n}) => {\n  // const {img, title, author}=props;\n  {\n    /*object destructuring in Javascript on line 44 and 45\n    this makes its so I dont have to call title.props and author.title\n    for every line of html, i sorta like using object parameters in the const book parameter.\n    */\n  }\n  return /*#__PURE__*/_jsxDEV(\"article\", {\n    className: \"book\",\n    children: [/*#__PURE__*/_jsxDEV(\"img\", {\n      src: img,\n      alt: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: author\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}; //this is an invocation\n\n\n_c2 = Book;\nReactDom.render( /*#__PURE__*/_jsxDEV(BookList, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 63,\n  columnNumber: 17\n}, this), document.getElementById('root'));\n{\n  /*\n  refactored around 2:37, removed this to go to iterating objects in an array\n  this is the children property object.It is not explicitly named \n  by the user, children is implicit in jsx, a contextual thing depending on \n  where it is located.\n  the children prop is everything that we \n  render in between the opening and closing tag of\n  the component. But only one of them will have that \n  description.\n  Notice that the children property is in between the Book properties opening and closing tags \n  We must access this, the children property is in the book object\n   const Book =({img,title,author,children}) =>{\n        <p> Properties are the values associated \n     with a Javascript object. A Javascript object is a collection of unordered properties.Properties can usually be \n     changed, added and deleted, but some are read only. 'objectName.property is person.age'. </p>\n     {children\n  /*\n  moving this component will change where it is displayed on the page.\n   \n  <Book \n  img={firstBook.img} \n  title={firstBook.title} \n  author = {firstBook.author}\n  >\n    \n  </Book >\n            <Book\n  img={secondBook.img} \n  title={secondBook.title} \n  author = {secondBook.author} />\n     \n  \n  const names = ['john', 'peter', 'mary', 'judas', 'paul'];\n  const newNames = names.map((name)=>{\n  return<h1> \n  {name} \n  </h1>\n  });\n  console.log(newNames);\n  */\n}\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"BookList\");\n$RefreshReg$(_c2, \"Book\");","map":{"version":3,"sources":["C:/Users/TAM_1/Desktop/tutorial/src/index.js"],"names":["React","ReactDom","books","img","title","author","BookList","map","book","console","log","Book","render","document","getElementById"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB,C,CAEA;AACA;;AACA,OAAO,aAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMC,KAAK,GAAG,CACd;AACIC,EAAAA,GAAG,EAAC,wFADR;AAEIC,EAAAA,KAAK,EAAC,+BAFV;AAGIC,EAAAA,MAAM,EAAC;AAHX,CADc,EAOd;AACIF,EAAAA,GAAG,EAAC,uFADR;AAEIC,EAAAA,KAAK,EAAC,kDAFV;AAGIC,EAAAA,MAAM,EAAC;AAHX,CAPc,CAAd;;AAcA,SAASC,QAAT,GAAoB;AACpB,sBACI;AAAS,IAAA,SAAS,EAAE,UAApB;AAAA,cACMJ,KAAK,CAACK,GAAN,CAAWC,IAAD,IAAU;AACjBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,aAAO;AAACN,QAAAA;AAAD,OAAP;AACA,KAHH;AADN;AAAA;AAAA;AAAA;AAAA,UADJ;AAUC;;KAXQI,Q;AAYT;AAAC;AAAgE;;AAEjE,MAAMK,IAAI,GAAE,CAAC;AAACR,EAAAA,GAAD;AAAKC,EAAAA,KAAL;AAAWC,EAAAA;AAAX,CAAD,KAAuB;AAChC;AACA;AAAC;AACJ;AACA;AACA;AAAG;AACC,sBACA;AAAS,IAAA,SAAS,EAAC,MAAnB;AAAA,4BACA;AAAK,MAAA,GAAG,EAAGF,GAAX;AAAgB,MAAA,GAAG,EAAE;AAArB;AAAA;AAAA;AAAA;AAAA,YADA,eAEA;AAAA,gBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,YAFA,eAGA;AAAA,gBAAKC;AAAL;AAAA;AAAA;AAAA;AAAA,YAHA;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;AAOH,CAbD,C,CAmBA;;;MAnBMM,I;AAoBNV,QAAQ,CAACW,MAAT,eAAgB,QAAC,QAAD;AAAA;AAAA;AAAA;AAAA,QAAhB,EAA4BC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA5B;AAGO;AAAC;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYK","sourcesContent":["import React from 'react';\nimport ReactDom from 'react-dom';\n\n//css, this means the file is in the same folder, I.E the css folder\n//is in the src folder with all the rest\nimport './index.css';\n/*\nrefactoring individual objects into an array by wrapping our objects in\nan opening square bracket and a closing square bracket,\nand also removing each closing semi-colon and replacing them with\na single comma\n\n\n*/\nconst books = [\n{\n    img:'https://images-na.ssl-images-amazon.com/images/I/81caWwaOOKL._AC_UL200_SR200,200_.jpg ',\n    title:'Once Upon a Time in Hollywood',\n    author:'Quentin Tarantino',\n},\n\n{\n    img:'https://images-na.ssl-images-amazon.com/images/I/71R8H1PuNdS._AC_UL200_SR200,200_.jpg',\n    title:'Speechless: Controlling words, Controlling Minds',\n    author:'Michael Knowles',\n},\n];\n\nfunction BookList (){\nreturn (\n    <section className ='booklist'>\n         {books.map((book) => {\n             console.log(book);\n             return {books};\n            })}\n            \n             </section>\n\n);\n}\n{/*alternative ways of doing props, single line style, neater */}\n\nconst Book =({img,title,author}) =>{\n   // const {img, title, author}=props;\n   {/*object destructuring in Javascript on line 44 and 45\n    this makes its so I dont have to call title.props and author.title\n    for every line of html, i sorta like using object parameters in the const book parameter.\n*/}\n    return( \n    <article className='book'>\n    <img src ={img} alt =''/>\n    <h1>{title}</h1>\n    <h4>{author}</h4>\n    </article>\n    );\n};\n\n\n \n\n\n//this is an invocation\nReactDom.render(<BookList/>,document.getElementById('root'));\n\n\n       {/*\n        refactored around 2:37, removed this to go to iterating objects in an array\n        this is the children property object.It is not explicitly named \n        by the user, children is implicit in jsx, a contextual thing depending on \n        where it is located.\n        the children prop is everything that we \n        render in between the opening and closing tag of\n        the component. But only one of them will have that \n        description.\n        Notice that the children property is in between the Book properties opening and closing tags \n        We must access this, the children property is in the book object\n\n        const Book =({img,title,author,children}) =>{\n              <p> Properties are the values associated \n           with a Javascript object. A Javascript object is a collection of unordered properties.Properties can usually be \n           changed, added and deleted, but some are read only. 'objectName.property is person.age'. </p>\n           {children\n    /*\n    moving this component will change where it is displayed on the page.\n    \n    \n     <Book \n       img={firstBook.img} \n       title={firstBook.title} \n       author = {firstBook.author}\n       >\n    \n     \n       </Book >\n      \n           <Book\n        img={secondBook.img} \n        title={secondBook.title} \n        author = {secondBook.author} />\n  \n        \n        \nconst names = ['john', 'peter', 'mary', 'judas', 'paul'];\nconst newNames = names.map((name)=>{\n    return<h1> \n       {name} \n    </h1>\n});\nconsole.log(newNames);\n\n\n\n\n   */\n  \n  \n    }\n       \n    "]},"metadata":{},"sourceType":"module"}